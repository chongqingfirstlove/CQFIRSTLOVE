在本次计算机专业读书实践周中，我深入学习了 git 与代码版本管理相关知识，并结合操作系统课程完成了相应项目，收获颇丰。下面将详细记录我的学习过程、遇到的问题及解决方法，还有心得体会。
一、学习资料来源
官方文档：Git 官方网站（https://git-scm.com/docs）提供了全面且权威的文档，从基础概念到高级操作，详细地介绍了 Git 的各项功能。其清晰的结构和丰富的示例，让我对 Git 的工作原理和使用方法有了深入的理解。
在线教程：“菜鸟教程”（https://www.runoob.com/git/git-tutorial.html）的 Git 教程非常适合初学者。它以简洁易懂的语言和大量实例，循序渐进地讲解了 Git 的常用命令，如初始化仓库、添加文件、提交更改、远程仓库操作等，帮助我快速上手。
相关书籍：《Pro Git》（中文译名《Git 权威指南》）这本书对 Git 进行了深入剖析，不仅涵盖了基本操作，还涉及到分支管理、变基操作、自定义 Git 等高级内容。通过阅读这本书，我对 Git 的理解上升到了一个新的高度，为解决复杂的版本管理问题提供了思路。
二、实践流程
安装与配置 Git：从 Git 官方网站下载对应系统的安装包并安装。安装完成后，在命令行中配置用户名和邮箱，使用命令git config --global user.name "Your Name"和git config --global user.email "your_email@example.com"，这样每次提交代码时，Git 就能识别我的身份信息。
创建本地仓库：在本地选择一个合适的目录，作为项目的工作目录。进入该目录后，在命令行中执行git init命令，将其初始化为一个 Git 仓库。之后，把操作系统课程项目的代码文件放入该目录，通过git add.命令将所有文件添加到暂存区，再使用git commit -m "Initial commit"命令提交更改，此时项目的初始版本就被记录下来了。
注册远程仓库账号并创建仓库：我选择在 Gitee 上注册账号，因为它对国内用户更友好，访问速度快。注册成功后，在 Gitee 上创建了一个公开的远程仓库，记录下仓库的 URL 地址。
推送代码到远程仓库：在本地仓库的命令行中，使用git remote add origin [远程仓库URL]命令将本地仓库与远程仓库关联起来。然后执行git push -u origin master（对于新创建的仓库，首次推送需加上-u参数），将本地的代码推送到远程仓库。此后，每次对项目代码进行修改后，都重复git add.、git commit -m "具体修改说明"和git push这几个步骤，确保远程仓库的代码与本地同步更新。
结合操作系统课程完成项目并更新学习笔记：按照操作系统课程要求，完成了一个简单的进程调度模拟项目。在项目开发过程中，不断使用 Git 进行版本管理。每完成一个功能模块，就提交一次代码，详细记录每次提交的变更内容。同时，在公开仓库中创建了一个学习笔记文件，记录下项目开发过程中涉及到的操作系统知识、算法实现思路、遇到的问题及解决方法等内容。每次更新项目代码后，也同步更新学习笔记，确保笔记内容与项目实际情况一致。
三、遇到的困难及解决方法
冲突解决：在与团队成员协作开发项目时，出现了代码冲突的情况。当我和另一位同学同时修改了同一个文件的同一部分内容，在推送代码时就会提示冲突。解决方法是首先执行git pull命令拉取远程仓库的最新代码，此时会提示冲突信息。打开冲突的文件，可以看到 Git 标记出了冲突的部分，手动修改代码，保留正确的内容，删除冲突标记。修改完成后，使用git add.命令将修改后的文件添加到暂存区，再执行git commit -m "Resolved conflict"提交更改，最后使用git push推送代码。
分支管理混乱：在项目开发过程中，为了实现不同的功能，创建了多个分支。但由于对分支管理不熟练，导致分支之间的关系混乱，一些功能无法正确合并到主分支。解决这个问题，我重新学习了 Git 的分支管理知识，使用git branch命令查看所有分支，git checkout -b [分支名]创建并切换到新分支，git merge [分支名]将指定分支合并到当前分支。通过梳理分支关系，将各个功能分支依次合并到主分支，确保项目代码的完整性和正确性。
四、心得体会
代码版本管理的重要性：通过本次实践，我深刻认识到代码版本管理的重要性。使用 Git 可以方便地记录代码的变更历史，随时回溯到之前的某个版本，这在项目开发过程中出现问题需要排查时非常有用。同时，多人协作开发时，Git 能够有效地管理不同成员的代码更改，避免冲突，提高开发效率。
持续学习与探索：计算机技术发展迅速，不断有新的工具和技术出现。在学习 Git 的过程中，我发现仅仅掌握基础操作是不够的，还需要深入学习其高级功能，如分支策略、变基操作等，才能更好地应对复杂的项目开发场景。这让我明白，在今后的学习和工作中，要保持学习的热情和好奇心，不断探索新技术，提升自己的专业能力。
团队协作的关键作用：在实践过程中，与团队成员协作完成项目，让我体会到团队协作的力量。不同成员有不同的思路和技能，通过相互交流和协作，可以更好地完成项目任务。同时，在协作过程中，也学会了如何与他人沟通，解决出现的问题，提高了自己的团队协作能力。
五、书籍推荐
《操作系统 - 清华大学》：这本书系统地介绍了操作系统的基本概念、原理和实现技术。书中内容涵盖进程管理、内存管理、文件系统、设备管理等核心部分，理论与实践相结合，配有大量的实例和习题，有助于深入理解操作系统的运行机制，非常适合计算机专业的学生学习。
《深入理解计算机系统》：它不仅对操作系统有深入的讲解，还涉及到计算机组成原理、编译原理、网络等多个领域的知识。通过阅读这本书，可以建立起一个完整的计算机系统知识体系，从底层硬件到上层软件，全面理解计算机系统的工作原理，对提升计算机专业素养有很大帮助。
